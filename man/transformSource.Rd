% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/transformation.R
\name{transformSource}
\alias{transformSource}
\alias{transformSourceFiles}
\title{Transform Templated Source}
\usage{
transformSource(dfList, sourceCode)

transformSourceFiles(dfList, fileDf, overwrite = FALSE)
}
\arguments{
\item{dfList}{a named list with data frames as elements. The name of an element denotes the name of an iteration block.
The column names of the data frames denote the names of the template variables.
Each line in a data frame will be one realization of the template variables. See example.}

\item{sourceCode}{character vector with templated strings}

\item{fileDf}{data frame with columns \code{source} and \code{destination}.
The templated sources will be read from the files in column \code{source} and
the transformed source will be output to the files in column \code{destination}.}

\item{overwrite}{Should destination files be overwritten when they already exists. Default is FALSe.}
}
\value{
character vector with iteration blocks and template variables substituted according to information in \code{dfList}.
}
\description{
Transform character vector by replacing iteration blocks and templated variables by strings.
}
\details{
The character vector \code{sourceCode} can contain iteration blocks.
Template variables can occur within each iteration block.
Iteration blocks have the following form:

\code{//R# <symbol name>[[start]]} \cr
\code{some text with [[R#<template variable>]]} \cr
\code{//R# <symbol name>[[end]]}

The name of the iteration block is given by \code{<symbol name>}.
The template variables within an iteration block are written as \code{[[R#<template variable>]]}.

It is also possible to define iteration blocks within other iteration blocks.
If their template variables should be conditioned on template variables of the parent block,
the iteration block header has to be adapted:

\code{//R# <symbol name[[start]] <someVar>=[[#<someVar>]]}

Such an iteration block will not be transformed until \code{[[#someVar]]} is replaced by a value.
Once the value is filled in, the data frame associated with the iteration block is filtered.
Only lines that contain the value filled in for \code{[[R#someVar]]} will be kept.
See the second example for further clarification.
}
\examples{
######################################
# First example: basic functionality
######################################

dfList <- list(name1=data.frame(fun1Name=c("sin","cos"),stringsAsFactors=FALSE),
name2=data.frame(fun2Name=c("tan","atan"),argName=c("angle","x"),stringsAsFactors=FALSE))

sourceCode <- c(
"//R# name1[[start]]","double [[R#fun1Name]](double x);","//R# name1[[end]]",
"//R# name2[[start]]","double [[R#fun2Name]](double [[R#argName]]);","//R# name2[[end]]")

transformSource(dfList, sourceCode)

################################################
# Second example: conditional iteration blocks
################################################

dfList <- list(
  name1=data.frame(fun1Name=c("sin","cos"),stringsAsFactors=FALSE),
  name2=data.frame(fun2Name=c("tan","atan"),argName=c("angle","x"),stringsAsFactors=FALSE),
  name3=data.frame(argName=c("angle","x"),str=c("an angle","something else"),stringsAsFactors=FALSE)
)

sourceCode <- c(
"//R# name1[[start]]","double [[R#fun1Name]](double x);","//R# name1[[end]]",
"//R# name2[[start]]",
"double [[R#fun2Name]](double [[R#argName]]) {",
"  //R# name3[[start]] argName=[[R#argName]]",
"  printf(\\"We find [[R#str]]\\");",
"  //R# name3[[end]]",
" }",
"//R# name2[[end]]")

transformedSource <- transformSource(dfList, sourceCode)
cat("--- Original Source ---\\n",paste0(sourceCode,collapse="\\n"),"\\n\\n")
cat("--- Transformed Source ---\\n",paste0(transformedSource,collapse="\\n"),"\\n\\n")

}
